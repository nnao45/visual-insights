export declare function firstWDis(p1: number[], p2: number[]): void;
export declare function l1Dis(p1: number[], p2: number[]): number;
export declare function l1Dis2(p1: number[][], p2: number[][]): number;
export declare function l2Dis2(p1: number[][], p2: number[][]): number;
export declare function w2dis(): void;
export declare function bin(nums: number[]): number[];
export declare function binShareRange(nums: number[], _min: number, _max: number): number[];
export declare function binMap(nums: number[]): number[];
export declare function binMapShareRange(nums: number[], _min: number, _max: number): number[];
export declare function rangeNormilize(fl: number[]): number[];
export declare function mic(T: number[], X: number[]): number;
export declare function generalMic(T: string[], X: number[]): number;
export declare function pureGeneralMic(T: string[], X: number[]): number;
export declare function pureGeneralConditionH(T: string[], X: number[]): number;
export declare function normalizeScatter(points: [number, number][]): number[][];
export declare function incSim(T: string[], pointsX: [number, number][], pointsY: [number, number][]): number;
export declare function initRanges(vals: number[][], order: number): [number, number][];
export declare function matrixBinShareRange(values: [number, number][], ranges: [number, number][]): number[][];
export declare function generalMatMic(T: string[], X: [number, number][]): number;
