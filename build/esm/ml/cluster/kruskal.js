"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.kruskalMST = exports.kruskalMSTWithLimitSize = void 0;
/**
 *
 * @param matrix adjmatrix
 */
function turnAdjMatrix2List(matrix) {
    // only for the special matrix here(corelational matrix)
    var edges = [];
    for (var i = 0; i < matrix.length; i++) {
        for (var j = i + 1; j < matrix[i].length; j++) {
            edges.push([[i, j], Math.abs(matrix[i][j])]);
        }
    }
    return edges;
}
function find(parents, n) {
    return parents[n] === n ? n : parents[n] = find(parents, parents[n]);
}
function union(parents, n1, n2) {
    var p1 = find(parents, n1);
    var p2 = find(parents, n2);
    parents[p1] = p2;
    // I'm too tired. this is just a tmp lazy solution.... will be fixed later.
    // may check and prove whether it's necessary.
    find(parents, n1);
    find(parents, n2);
}
function findWithEffect(parents, sizes, n) {
    if (parents[n] === n) {
        return n;
    }
    parents[n] = findWithEffect(parents, sizes, parents[n]);
    sizes[n] = sizes[parents[n]];
    return parents[n];
}
function unionWithEffect(parents, sizes, n1, n2) {
    var p1 = findWithEffect(parents, sizes, n1);
    var p2 = findWithEffect(parents, sizes, n2);
    var size1 = sizes[p1];
    var size2 = sizes[p2];
    parents[p1] = p2;
    sizes[p1] = sizes[p2] = size1 + size2;
    findWithEffect(parents, sizes, n1);
    findWithEffect(parents, sizes, n2);
}
/**
 * maxiumn spanning tree
 * @param matrix adjmatrix
 * @param groupNumber number of group generated by clustering
 */
function kruskal(matrix, groupNumber, threshold) {
    var e_1, _a;
    if (threshold === void 0) { threshold = 0; }
    var edges = turnAdjMatrix2List(matrix);
    edges.sort(function (a, b) { return b[1] - a[1]; });
    var parents = matrix.map(function (m, i) { return i; });
    try {
        for (var edges_1 = __values(edges), edges_1_1 = edges_1.next(); !edges_1_1.done; edges_1_1 = edges_1.next()) {
            var edge = edges_1_1.value;
            if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {
                union(parents, edge[0][0], edge[0][1]);
            }
            for (var i = 0; i < parents.length; i++) {
                parents[i] = find(parents, i);
            }
            var set = new Set(parents);
            if (set.size <= groupNumber || edge[1] < threshold) {
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (edges_1_1 && !edges_1_1.done && (_a = edges_1.return)) _a.call(edges_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var groups = new Map();
    for (var i = 0; i < parents.length; i++) {
        if (!groups.has(parents[i])) {
            groups.set(parents[i], []);
        }
        groups.get(parents[i]).push(i);
    }
    return groups;
}
// todo: delete kruskal with limit size, use largest size to limit it(uncontrolled group number but better), need discuss.
/**
 *
 * @param matrix
 * @param limitSize max size of each group
 */
function kruskalWithLimitSize(matrix, limitSize) {
    var e_2, _a;
    var edges = turnAdjMatrix2List(matrix);
    edges.sort(function (a, b) { return b[1] - a[1]; });
    var parents = matrix.map(function (m, i) { return i; });
    var sizes = matrix.map(function () { return 1; });
    try {
        for (var edges_2 = __values(edges), edges_2_1 = edges_2.next(); !edges_2_1.done; edges_2_1 = edges_2.next()) {
            var edge = edges_2_1.value;
            if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {
                if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {
                    continue;
                }
                unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);
            }
            for (var i = 0; i < parents.length; i++) {
                parents[i] = findWithEffect(parents, sizes, i);
            }
            var set = new Set(parents);
            if (set.size === 1) {
                break;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (edges_2_1 && !edges_2_1.done && (_a = edges_2.return)) _a.call(edges_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    var groups = new Map();
    for (var i = 0; i < parents.length; i++) {
        if (!groups.has(parents[i])) {
            groups.set(parents[i], []);
        }
        groups.get(parents[i]).push(i);
    }
    return groups;
}
function kruskalMSTWithLimitSize(matrix, limitSize) {
    var e_3, _a;
    if (limitSize === void 0) { limitSize = 4; }
    var edges = turnAdjMatrix2List(matrix);
    edges.sort(function (a, b) { return b[1] - a[1]; });
    var edgesInMST = [];
    var parents = matrix.map(function (m, i) { return i; });
    var cloneParents = matrix.map(function (m, i) { return i; });
    var sizes = matrix.map(function () { return 1; });
    try {
        for (var edges_3 = __values(edges), edges_3_1 = edges_3.next(); !edges_3_1.done; edges_3_1 = edges_3.next()) {
            var edge = edges_3_1.value;
            if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {
                if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {
                    if (find(cloneParents, edge[0][0]) !== find(cloneParents, edge[0][1])) {
                        edgesInMST.push([edge[0], edge[1], true]);
                        union(cloneParents, edge[0][0], edge[0][1]);
                    }
                    continue;
                }
                unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);
                // fuck typescript
                // edgesInMST.push([...edge, inCutEdge]);
                edgesInMST.push([edge[0], edge[1], false]);
            }
            for (var i = 0; i < parents.length; i++) {
                parents[i] = findWithEffect(parents, sizes, i);
                cloneParents[i] = find(cloneParents, i);
            }
            var set = new Set(parents);
            if (set.size === 1) {
                break;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (edges_3_1 && !edges_3_1.done && (_a = edges_3.return)) _a.call(edges_3);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return { edgesInMST: edgesInMST, groups: parents };
}
exports.kruskalMSTWithLimitSize = kruskalMSTWithLimitSize;
/**
 *
 * @param matrix
 * @param groupNumber number of group generated by clustering
 */
function kruskalMST(matrix, groupNumber, threshold) {
    var e_4, _a;
    if (groupNumber === void 0) { groupNumber = 4; }
    if (threshold === void 0) { threshold = 0; }
    var edges = turnAdjMatrix2List(matrix);
    edges.sort(function (a, b) { return b[1] - a[1]; });
    var edgesInMST = [];
    var parents = matrix.map(function (m, i) { return i; });
    var groups = __spreadArray([], __read(parents), false);
    var inCutEdge = false;
    try {
        for (var edges_4 = __values(edges), edges_4_1 = edges_4.next(); !edges_4_1.done; edges_4_1 = edges_4.next()) {
            var edge = edges_4_1.value;
            if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {
                union(parents, edge[0][0], edge[0][1]);
                // fuck typescript
                // edgesInMST.push([...edge, inCutEdge]);
                edgesInMST.push([edge[0], edge[1], inCutEdge]);
            }
            for (var i = 0; i < parents.length; i++) {
                parents[i] = find(parents, i);
            }
            var set = new Set(parents);
            // TODO:
            // + use kruskalMST instead of kruskal.
            if (set.size <= groupNumber || edge[1] < threshold) {
                inCutEdge = true;
            }
            else {
                groups = __spreadArray([], __read(parents), false);
            }
            if (set.size === 1) {
                break;
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (edges_4_1 && !edges_4_1.done && (_a = edges_4.return)) _a.call(edges_4);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return { edgesInMST: edgesInMST, groups: groups };
}
exports.kruskalMST = kruskalMST;
function cluster(_a) {
    var e_5, _b;
    var matrix = _a.matrix, measures = _a.measures, _c = _a.method, method = _c === void 0 ? 'kruskal' : _c, _d = _a.groupMaxSize, groupMaxSize = _d === void 0 ? 4 : _d, _e = _a.limitSize, limitSize = _e === void 0 ? false : _e, _f = _a.threshold, threshold = _f === void 0 ? 0 : _f;
    // const groups = kruskal({ matrix, groupMaxSize });
    var groups;
    if (limitSize) {
        groups = kruskalWithLimitSize(matrix, groupMaxSize);
    }
    else {
        groups = kruskal(matrix, groupMaxSize, threshold);
    }
    var ans = [];
    try {
        for (var _g = __values(groups.values()), _h = _g.next(); !_h.done; _h = _g.next()) {
            var meas = _h.value;
            ans.push(meas.map(function (meaIndex) { return measures[meaIndex]; }));
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return ans;
}
exports.default = cluster;
